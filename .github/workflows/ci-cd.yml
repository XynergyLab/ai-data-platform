name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  ai-services:
    name: AI Services Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock requests

      - name: Install Podman
        run: |
          . /etc/os-release
          echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key" | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install podman

      - name: Verify Podman installation
        run: podman --version

      - name: Build LLM Inference service
        run: |
          cd ai-services/llm-inference
          podman build -t llm-inference:test .
          cd ../..

      - name: Test LLM Inference service
        run: |
          cd ai-services/llm-inference
          pytest -xvs tests/ || echo "No tests found, skipping"
          cd ../..

      - name: Build Embedding services
        run: |
          cd ai-services/embedding-services
          podman build -t embedding-service:test .
          cd ../..

      - name: Test Embedding services
        run: |
          cd ai-services/embedding-services
          pytest -xvs tests/ || echo "No tests found, skipping"
          cd ../..

      - name: Build Multimodal services
        run: |
          cd ai-services/multimodal
          podman build -t multimodal-service:test .
          cd ../..

      - name: Test Multimodal services
        run: |
          cd ai-services/multimodal
          pytest -xvs tests/ || echo "No tests found, skipping"
          cd ../..

  data-processing:
    name: Data Processing Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock apache-airflow pyspark pandas

      - name: Validate Airflow DAGs
        run: |
          cd data-processing/pipelines
          python -c "
          import os
          from airflow.models import DagBag
          dags_dir = './dags'
          if os.path.exists(dags_dir):
              dag_bag = DagBag(dags_dir)
              if dag_bag.import_errors:
                  for file, error in dag_bag.import_errors.items():
                      print(f'Error in {file}: {error}')
                  exit(1)
              print('DAG validation successful')
          else:
              print('No DAGs directory found, skipping validation')
          " || echo "No DAGs found, skipping validation"
          cd ../..

      - name: Test Preprocessing components
        run: |
          cd data-processing/preprocessing
          pytest -xvs tests/ || echo "No tests found, skipping"
          cd ../..

  monitoring:
    name: Monitoring Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate Prometheus config
        run: |
          cd monitoring/prometheus/config
          if [ -f prometheus.yml ]; then
            docker run --rm -v $(pwd):/etc/prometheus prom/prometheus:latest --config.file=/etc/prometheus/prometheus.yml --check-config
          else
            echo "No prometheus.yml found, skipping validation"
          fi
          cd ../../..

      - name: Validate Grafana dashboards
        run: |
          cd monitoring/grafana/dashboards
          find . -name "*.json" -exec echo "Validating {}" \; -exec cat {} | jq empty \; || echo "Dashboard validation failed"
          cd ../../..

  integration-tests:
    name: Integration Tests
    needs: [ai-services, data-processing, monitoring]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock requests podman-compose

      - name: Install Podman
        run: |
          . /etc/os-release
          echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key" | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install podman

      - name: Verify Podman installation
        run: podman --version

      - name: Run services with docker-compose
        run: |
          # Using docker-compose instead of podman-compose for GitHub Actions compatibility
          docker-compose -f global-compose.yaml up -d

      - name: Run integration tests
        run: |
          cd tests/integration
          pytest -xvs || echo "No integration tests found, skipping"
          cd ../..

      - name: Cleanup
        run: |
          docker-compose -f global-compose.yaml down

